package com.wlw.admin.myapplication.db.gen;

import android.database.Cursor;
import android.database.sqlite.SQLiteStatement;

import org.greenrobot.greendao.AbstractDao;
import org.greenrobot.greendao.Property;
import org.greenrobot.greendao.internal.DaoConfig;
import org.greenrobot.greendao.database.Database;
import org.greenrobot.greendao.database.DatabaseStatement;

import com.wlw.admin.myapplication.calendar.data.Lunar;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "LUNAR".
*/
public class LunarDao extends AbstractDao<Lunar, Long> {

    public static final String TABLENAME = "LUNAR";

    /**
     * Properties of entity Lunar.<br/>
     * Can be used for QueryBuilder and for referencing column names.
     */
    public static class Properties {
        public final static Property LunarId = new Property(0, Long.class, "lunarId", true, "_id");
        public final static Property LunarDay = new Property(1, int.class, "lunarDay", false, "LUNAR_DAY");
        public final static Property Isleap = new Property(2, boolean.class, "isleap", false, "ISLEAP");
        public final static Property LunarMonth = new Property(3, int.class, "lunarMonth", false, "LUNAR_MONTH");
        public final static Property LunarYear = new Property(4, int.class, "lunarYear", false, "LUNAR_YEAR");
        public final static Property IsLFestival = new Property(5, boolean.class, "isLFestival", false, "IS_LFESTIVAL");
        public final static Property LunarFestivalName = new Property(6, String.class, "lunarFestivalName", false, "LUNAR_FESTIVAL_NAME");
    }


    public LunarDao(DaoConfig config) {
        super(config);
    }
    
    public LunarDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(Database db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"LUNAR\" (" + //
                "\"_id\" INTEGER PRIMARY KEY AUTOINCREMENT ," + // 0: lunarId
                "\"LUNAR_DAY\" INTEGER NOT NULL ," + // 1: lunarDay
                "\"ISLEAP\" INTEGER NOT NULL ," + // 2: isleap
                "\"LUNAR_MONTH\" INTEGER NOT NULL ," + // 3: lunarMonth
                "\"LUNAR_YEAR\" INTEGER NOT NULL ," + // 4: lunarYear
                "\"IS_LFESTIVAL\" INTEGER NOT NULL ," + // 5: isLFestival
                "\"LUNAR_FESTIVAL_NAME\" TEXT);"); // 6: lunarFestivalName
    }

    /** Drops the underlying database table. */
    public static void dropTable(Database db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"LUNAR\"";
        db.execSQL(sql);
    }

    @Override
    protected final void bindValues(DatabaseStatement stmt, Lunar entity) {
        stmt.clearBindings();
 
        Long lunarId = entity.getLunarId();
        if (lunarId != null) {
            stmt.bindLong(1, lunarId);
        }
        stmt.bindLong(2, entity.getLunarDay());
        stmt.bindLong(3, entity.getIsleap() ? 1L: 0L);
        stmt.bindLong(4, entity.getLunarMonth());
        stmt.bindLong(5, entity.getLunarYear());
        stmt.bindLong(6, entity.getIsLFestival() ? 1L: 0L);
 
        String lunarFestivalName = entity.getLunarFestivalName();
        if (lunarFestivalName != null) {
            stmt.bindString(7, lunarFestivalName);
        }
    }

    @Override
    protected final void bindValues(SQLiteStatement stmt, Lunar entity) {
        stmt.clearBindings();
 
        Long lunarId = entity.getLunarId();
        if (lunarId != null) {
            stmt.bindLong(1, lunarId);
        }
        stmt.bindLong(2, entity.getLunarDay());
        stmt.bindLong(3, entity.getIsleap() ? 1L: 0L);
        stmt.bindLong(4, entity.getLunarMonth());
        stmt.bindLong(5, entity.getLunarYear());
        stmt.bindLong(6, entity.getIsLFestival() ? 1L: 0L);
 
        String lunarFestivalName = entity.getLunarFestivalName();
        if (lunarFestivalName != null) {
            stmt.bindString(7, lunarFestivalName);
        }
    }

    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
    }    

    @Override
    public Lunar readEntity(Cursor cursor, int offset) {
        Lunar entity = new Lunar( //
            cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // lunarId
            cursor.getInt(offset + 1), // lunarDay
            cursor.getShort(offset + 2) != 0, // isleap
            cursor.getInt(offset + 3), // lunarMonth
            cursor.getInt(offset + 4), // lunarYear
            cursor.getShort(offset + 5) != 0, // isLFestival
            cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6) // lunarFestivalName
        );
        return entity;
    }
     
    @Override
    public void readEntity(Cursor cursor, Lunar entity, int offset) {
        entity.setLunarId(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setLunarDay(cursor.getInt(offset + 1));
        entity.setIsleap(cursor.getShort(offset + 2) != 0);
        entity.setLunarMonth(cursor.getInt(offset + 3));
        entity.setLunarYear(cursor.getInt(offset + 4));
        entity.setIsLFestival(cursor.getShort(offset + 5) != 0);
        entity.setLunarFestivalName(cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6));
     }
    
    @Override
    protected final Long updateKeyAfterInsert(Lunar entity, long rowId) {
        entity.setLunarId(rowId);
        return rowId;
    }
    
    @Override
    public Long getKey(Lunar entity) {
        if(entity != null) {
            return entity.getLunarId();
        } else {
            return null;
        }
    }

    @Override
    public boolean hasKey(Lunar entity) {
        return entity.getLunarId() != null;
    }

    @Override
    protected final boolean isEntityUpdateable() {
        return true;
    }
    
}
